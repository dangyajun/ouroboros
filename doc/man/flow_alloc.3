.\" Ouroboros man pages CC-BY 2017 - 2024
.\" Dimitri Staessens <dimitri@ouroboros.rocks>
.\" Sander Vrijders <sander@ouroboros.rocks>

.TH FLOW_ALLOC 3 2018-10-05 Ouroboros "Ouroboros Programmer's Manual"

.SH NAME

flow_accept, flow_alloc, flow_dealloc \- allocate and free resources
to support Inter-Process Communication

.SH SYNOPSIS

.B #include <ouroboros/dev.h>

\fBint flow_accept(qosspec_t * \fIqs\fB,
const struct timespec * \fItimeo\fB);

int flow_alloc(const char * \fIdst_name\fB, qosspec_t * \fIqs\fB,
const struct timespec * \fItimeo\fB);

int flow_join(const char * \fIdst_name\fB, qosspec_t * \fIqs\fB, const
struct timespec * \fItimeo\fB);

\fBint flow_dealloc(int \fIfd\fB);\fR

Compile and link with \fI-louroboros-dev\fR.

.SH DESCRIPTION

These calls are used to allocate and free system and network resources
to support Inter-Process Communication (IPC). Such a collection of
allocated system and network resources is referred to as a flow. A
flow has a certain Quality of Service (QoS) associated with it.

The \fBflow_accept\fR() function blocks the calling thread waiting for
an incoming request to allocate a flow. If \fBqosspec_t * \fIqs\fR is
not NULL, the value of \fIqs\fR will be updated to reflect the actual
QoS provided by the IPC facility for the accepted flow. Which flows
this process will accept is configured through the IRMd. For an
explanation on configuring which flows an application should accept,
see \fBirm\fR(8).

The \fBflow_alloc\fR() function requests to allocate system and/or
network resources to support Inter-Process Communication between the
calling application and one or more processes accepting flows for
\fBchar * \fIdst_name\fR, which cannot be NULL.  The
\fBflow_alloc\fR() call can specify a certain minimum \fBqosspec_t *
\fIqs\fR that has to be guaranteed by the IPC facility allocating the
resources. This can be NULL if there is no QoS to be guaranteed (best
effort service). If \fIqs\fR is not NULL, the value of \fIqs\fR will
be updated to reflect the actual QoS provided by the IPC facility.

The \fBflow_accept\fR() and \fBflow_alloc\fR() take a \fBconst struct
timespec * \fItimeo\fR to specify a timeout. If \fItimeo\fR is NULL,
the call will block indefinitely or until some error condition occurs.

The \fBflow_join\fR() function allows applications to join a broadcast
flow provided by a broadcast layer. The dst is the layer name.

The \fBflow_dealloc\fR() function will release any resources
associated with the flow. This call may block and keep reliable flows
active until all packets are acknowledged.

A \fBqosspec_t\fR specifies the following QoS characteristics of a
flow:

TODO: specify a qosspec_t

.SH RETURN VALUE

On success, \fBflow_accept\fR() and \fBflow_alloc\fR() calls return a
non-negative integer, referred to as a flow descriptor. On failure, a
negative value indicating the error will be returned.

.SH ERRORS

\fBflow_accept\fR(), \fBflow_alloc\fR() and \fBflow_dealloc\fR() can
return the following errors:

.B -EINVAL
An invalid argument was passed.

.B -EIRMD
Failed to contact an IRMd instance.

\fBflow_accept\fR() and \fBflow_alloc\fR() can also return

.B -EBADF
No more flow desciptors or flow_ids available.

.B -ENOMEM
Not enough system memory resources available to allocate the flow.

.B -ETIMEDOUT
Flow allocation timed out.

.B -ECRYPT
The requested encryption is not supported.

.SH ATTRIBUTES

For an explanation of the terms used in this section, see \fBattributes\fR(7).

.TS
box, tab(&);
LB|LB|LB
L|L|L.
Interface & Attribute & Value
_
\fBflow_accept\fR() & Thread safety & MT-Safe
_
\fBflow_alloc\fR() & Thread safety & MT-Safe
_
\fBflow_join\fR() & Thread safety & MT-Safe
_
\fBflow_dealloc\fR() & Thread safety & MT-Safe
.TE

.SH TERMINOLOGY
Please see \fBouroboros-glossary\fR(7).

.SH SEE ALSO

.BR fccntl "(3), " flow_read "(3), " fqueue "(3), " fset "(3), " \
ouroboros (8)

.SH COLOPHON
This page is part of the Ouroboros project, found at
http://ouroboros.rocks

These man pages are licensed under the Creative Commons Attribution
4.0 International License. To view a copy of this license, visit
http://creativecommons.org/licenses/by/4.0/
